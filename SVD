from surprise import SVD
from surprise import Dataset, Reader, accuracy, Trainset, KNNBasic
from surprise import Trainset
from surprise.model_selection import cross_validate, train_test_split, GridSearchCV

reader = Reader(rating_scale=(1, 5))
# The columns must correspond to user id, item id and ratings (in that order).
#datafull = Dataset.load_from_df(latest_napa[['userID', 'activityID', 'rating']], reader)
datafull = Dataset.load_from_df(df_p[['userID', 'activityID', 'rating']], reader)

# n_factor
factor_grid = {'n_factors': [1,2,3,5,10,20,50]}
nf = GridSearchCV(SVD, factor_grid, measures=['rmse', 'mae'], cv = 3)
nf.fit(datafull)
print(nf.best_score)
print(nf.best_params)
plt.plot(nf.cv_results['param_n_factors'], nf.cv_results['mean_test_rmse'], label = "RMSE") 
plt.plot(nf.cv_results['param_n_factors'], nf.cv_results['mean_test_mae'], label = "MAE") 
plt.xlabel('n_factor')
plt.ylabel('Error')
plt.legend()
plt.show()

# learning rate
lr_grid = {'lr_all': [0.0005, 0.001, 0.002, 0.005, 0.007, 0.01]}
lr = GridSearchCV(SVD, lr_grid, measures=['rmse', 'mae'], cv = 3)
lr.fit(datafull)
print(lr.best_score)
print(lr.best_params)
plt.plot(lr.cv_results['param_lr_all'], lr.cv_results['mean_test_rmse'], label = "RMSE") 
plt.plot(lr.cv_results['param_lr_all'], lr.cv_results['mean_test_mae'], label = "MAE") 
plt.xlabel('Learning Rate')
plt.ylabel('Error')
plt.legend()
plt.show() 

# regularization 
reg_grid = {'reg_all': [0.01, 0.02, 0.05, 0.07, 0.1]}
reg = GridSearchCV(SVD, reg_grid, measures=['rmse', 'mae'], cv = 3)
reg.fit(datafull)
print(reg.best_score)
print(reg.best_params)
plt.plot(reg.cv_results['param_reg_all'], reg.cv_results['mean_test_rmse'], label = "RMSE") 
plt.plot(reg.cv_results['param_reg_all'], reg.cv_results['mean_test_mae'], label = "MAE") 
plt.xlabel('Regularization Term')
plt.ylabel('Error')
plt.legend()
plt.show()

# combination
param_grid = {'n_factors': [1, 2], 'n_epochs': [50,100], 'lr_all': [0.002, 0.01], 'reg_all': [0.07, 0.1]}
gs = GridSearchCV(SVD, param_grid, measures=['rmse', 'mae'], cv = 3)
gs.fit(datafull)
# best RMSE score
print(gs.best_score['rmse'])
# combination of parameters that gave the best RMSE score
print(gs.best_params['rmse'])
# Build an algorithm, and train it.
algo = gs.best_estimator['rmse']

# scenario1

param_grid = {'n_factors': [1, 2], 'n_epochs': [50,100], 'lr_all': [0.002, 0.01], 'reg_all': [0.07, 0.1]}
gs = GridSearchCV(SVD, param_grid, measures=['rmse', 'mae'], cv = 3)
gs.fit(datafull)
# best RMSE score
print(gs.best_score['rmse'])
# combination of parameters that gave the best RMSE score
print(gs.best_params['rmse'])
# Build an algorithm, and train it.
algo = gs.best_estimator['rmse']

# train set 90%, test set 10%
trainset90, testset10 = train_test_split(datafull, test_size=.1)
predictions10 = algo.fit(trainset90).test(testset10)
print('MSE for train set 90%, test set 10%:', accuracy.rmse(predictions10) **2)

#train set 80%, test set 20%
trainset80, testset20 = train_test_split(datafull, test_size=.2)
predictions20 = algo.fit(trainset80).test(testset20)
print('MSE for train set 80%, test set 20%:', accuracy.rmse(predictions20) **2)

# end scenario1



# scenario2
def single_user_oneplace(data, uid):
  temp = data.loc[data['userID'] == uid]
  # test data
  test = temp.iloc[5:,[2,1,3]].to_records(index = False).tolist()
  # train data
  train = data.drop(labels=temp.index.to_list()[5:])
  train = Dataset.load_from_df(train[['userID', 'activityID', 'rating']], reader)
  # prediction
  pred = algo.fit(train.build_full_trainset()).test(test)
  print(accuracy.rmse(pred) **2)
  return train, test, pred

# user 'mljack'
train_jack, test_jack, pred_jack = single_user_oneplace(latest_austin, 'mljack')
# user 'P7464TCjoelm'
train_p74, test_p74, pred_p74 = single_user_oneplace(latest_austin, 'P7464TCjoelm')

# end scenario2



# scenario3
def single_user(clean_data, uid, des):
  data = clean_data.copy()
  # test set
  test = data[(data['userID'] == uid) & (data['destination'] == des)].iloc[:,[2,1,3]].to_records(index = False).tolist()
  # train set
  data = data[-((data['userID'] == uid) & (data['destination'] == des))]
  data = Dataset.load_from_df(data[['userID', 'activityID', 'rating']], reader)

  return data, test

train, test = single_user(df_c, 'mini', 'sonoma')
train2, test2 = single_user(df_c, 'pfefmeister', 'sonoma')


param_grid = {'n_factors': [1, 3, 5], 'n_epochs': [20,50], 'lr_all': [0.002, 0.01], 'reg_all': [0.05, 0.1]}
gs = GridSearchCV(SVD, param_grid, measures=['rmse', 'mae'], cv = 3)

# 'mini'
gs.fit(train)
print(gs.best_score['rmse'])
print(gs.best_params['rmse'])
algo = gs.best_estimator['rmse']
pred_mini = algo.fit(train.build_full_trainset()).test(test)
accuracy.rmse(pred_mini) ** 2

# 'pfefmeister'
gs = GridSearchCV(SVD, param_grid, measures=['rmse', 'mae'], cv = 3)
gs.fit(train2)
algo = gs.best_estimator['rmse']
pred_pf = algo.fit(train2.build_full_trainset()).test(test2)
accuracy.rmse(pred_pf) ** 2


# end scenario3
